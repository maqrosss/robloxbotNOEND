from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup,KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import sqlite3
from aiogram.dispatcher.filters.state import State, StatesGroup
import random
import asyncio
import string
import json
import aiohttp

help_chat = -919023328

bot = Bot(token='5843422546:AAEzI0mp90UjdEJb-7kc0TXQsWKAnIonQwk')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class states(StatesGroup):
    help = State()
    changecookies = State()

conn = sqlite3.connect("database.db")
cursor = conn.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER, username TEXT, cookie TEXT DEFAULT 0)")
cursor.execute("CREATE TABLE IF NOT EXISTS help (user_id INTEGER, msg_id INTEGER)")

mainkeyboard = ReplyKeyboardMarkup(resize_keyboard=True)
mainkeyboard.add(KeyboardButton("üíé –ü—Ä–µ–º–∏—É–º"), KeyboardButton("‚ùì –ö–∞–∫–∏–µ –ª–∏–º–∏—Ç–∫–∏ –º—ã –ø–æ–π–º–∞–ª–∏"), KeyboardButton("üìî –ù–∞—à –¢–ì–ö"))
mainkeyboard.add(KeyboardButton("üç™ –ú–æ–π –∫—É–∫–∏"), KeyboardButton("üìù –û—Ç–∑—ã–≤—ã"))
mainkeyboard.add(KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("‚ùì FAQ"))
mainkeyboard.add(KeyboardButton("üë®‚Äçüíª GitHub"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (message.from_user.id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (message.from_user.id, message.from_user.username))
        conn.commit()
        await message.reply("<b>–≠—Ç–æ –±–æ—Ç –ø–æ –ª–æ–≤–ª–µ UGC –ª–∏–º–∏—Ç–æ–∫!</b>", parse_mode="HTML", reply_markup=mainkeyboard)
    await message.reply("<b>‚¨áÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è</b>", parse_mode="HTML", reply_markup=mainkeyboard)

@dp.message_handler(content_types=types.ContentTypes.TEXT, text="üíé –ü—Ä–µ–º–∏—É–º")
async def prem(message: types.Message):
    await message.reply("<b>–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π :) –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞-—á—Ç–æ –Ω–µ—Ç</b>", parse_mode="HTML", reply_markup=mainkeyboard)

@dp.message_handler(content_types=types.ContentTypes.TEXT, text="üìî –ù–∞—à –¢–ì–ö")
async def TGK(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="üìî –°—Å—ã–ª–∫–∞", url="https://t.me/aiogrammader"))
    await message.reply("üìî –ù–∞—à –¢–ì–ö", parse_mode="HTML", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentTypes.TEXT, text="‚ùì –ö–∞–∫–∏–µ –ª–∏–º–∏—Ç–∫–∏ –º—ã –ø–æ–π–º–∞–ª–∏")
async def howlimited(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", url="https://t.me/aiogrammader"))
    await message.reply("<b>–ù–∞—à –∫–∞–Ω–∞–ª –≥–¥–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ–π–º–∞–Ω—ã–µ –ª–∏–º–∏—Ç–∫–∏</b>", parse_mode="HTML", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentTypes.TEXT, text="üç™ –ú–æ–π –∫—É–∫–∏")
async def cookie(message: types.Message):
    cursor.execute("SELECT cookie FROM users WHERE user_id = ?", (message.from_user.id,))
    cookies = cursor.fetchone()[0]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="üç™ –°–º–µ–Ω–∏—Ç—å –∫—É–∫–∏", callback_data="changecookie"))
    async with aiohttp.ClientSession(cookies={".ROBLOSECURITY": cookies}) as client:
        response = await client.get("https://users.roblox.com/v1/users/authenticated", ssl = False)
        data = await response.json()
        if data.get('id') == None:
            await message.reply("<b><u>–í–∞–º –Ω—É–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –∫—É–∫–∏!</u></b>", parse_mode="HTML", reply_markup=keyboard)
            return
        await message.reply("<b>–° –∫—É–∫–∏ <u>–≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ!</u></b>", parse_mode="HTML", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentTypes.TEXT, text="üìù –û—Ç–∑—ã–≤—ã")
async def review(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã", url="https://t.me/aiogrammader"))
    await message.reply("üìù –û—Ç–∑—ã–≤—ã", parse_mode="HTML", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentTypes.TEXT, text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def help(message: types.Message):
    await message.reply("<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>", parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
    await states.help.set()

@dp.message_handler(content_types=types.ContentTypes.TEXT, text="‚ùì FAQ")
async def faq(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="‚ùì FAQ", url="https://t.me/aiogrammader"))
    await message.reply("<b>‚ùì FAQ</b>", parse_mode="HTML", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentTypes.TEXT, text="üë®‚Äçüíª GitHub")
async def faq(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="üë®‚Äçüíª GitHub", url="https://github.com/"))
    await message.reply("<b>GitHub –∞–≤—Ç–æ—Ä–∞ - —Ç–∞–º –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ <tg-spoiler>(—Å–∫–æ—Ä–æ)</tg-spoiler> –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞</b>", parse_mode="HTML", reply_markup=keyboard)

#—Å—Ç–µ–π—Ç—ã –∫–∞–ª–±–µ–∫–∏

@dp.message_handler(state=states.help)
async def process_help_text(message: types.Message, state: FSMContext):
    await message.reply("<b>–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤ —Å–∫–æ—Ä–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç!</b>", parse_mode="HTML", reply_markup=mainkeyboard)
    await state.finish()
    help_user = await bot.send_message(help_chat, f"{message.text}")
    cursor.execute("INSERT INTO help (user_id, msg_id) VALUES (?, ?)", (message.from_user.id, help_user.message_id))
    conn.commit()
    await state.finish()

@dp.message_handler(chat_id=help_chat, is_reply=True)
async def answer(message: types.Message):
    try:
        replied_message_id = message.reply_to_message.message_id
        if message.text == "/clear":
            await bot.delete_message(message.chat.id, replied_message_id)
            await bot.delete_message(message.chat.id, message.message_id)
            return
        elif message.text == "/info":
            cursor.execute("SELECT user_id FROM help WHERE msg_id = ?", (replied_message_id,))
            user_id = cursor.fetchone()[0]
            await message.reply(f"UID: {user_id}")
            return
        cursor.execute("SELECT user_id FROM help WHERE msg_id = ?", (replied_message_id,))
        uid = cursor.fetchone()[0]
        await bot.send_message(uid, f"<b>–í–∞—à –≤–æ–ø—Ä–æ—Å: {message.reply_to_message.text}\n–û—Ç–≤–µ—Ç: {message.text}</b>", parse_mode="HTML")
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.delete_message(message.chat.id, replied_message_id)
        dels = await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        await asyncio.sleep(2)
        await bot.delete_message(dels.chat.id, dels.message_id)
    except:
        await message.reply("Error –±—Ä–∞—Ç")
    
@dp.callback_query_handler(lambda c: c.data == "changecookie")
async def changecookie(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É–∫–∏\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç –µ—Å–ª–∏ –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª–∏</b>", parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
    await states.changecookies.set()

@dp.message_handler(state=states.changecookies)
async def changecookies(message: types.Message, state: FSMContext):
    cookies = message.text
    if cookies.lower() == "–Ω–µ—Ç":
        await message.reply("<b>–ü–æ–Ω—è–ª</b>", parse_mode="HTML", reply_markup=mainkeyboard)
        await state.finish()
        return
    async with aiohttp.ClientSession(cookies={".ROBLOSECURITY": cookies}) as client:
        response = await client.get("https://users.roblox.com/v1/users/authenticated", ssl = False)
        data = await response.json()
        if data.get('id') == None:
            await message.reply("<b><u>–ö—É–∫–∏ –Ω–µ–≤–∞–ª–∏–¥!</u>\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª(-–∞)</b>", parse_mode="HTML")
            return
        await message.answer("<b>–° –∫—É–∫–∏ <u>–≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ!</u></b>", parse_mode="HTML", reply_markup=mainkeyboard)
        await message.delete()
    cursor.execute("UPDATE users SET cookie = ? WHERE user_id = ?", (cookies, message.from_user.id))
    conn.commit()

    with open('config.json', 'r') as file:
        config = json.load(file)
    new_account_value = cookies
    config["accounts"].append(new_account_value)
    with open('config.json', 'w') as file:
        json.dump(config, file, indent=4)

    await state.finish()


#–æ—Å—Ç

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def idk(message: types.Message):
    await message.reply("<b>–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é!</b>", reply_markup=mainkeyboard, parse_mode="HTML")

async def check_config():
    while True:
        with open('config.json', 'r') as config_file:
            config_data = json.load(config_file)
        accounts = config_data.get('accounts', [])
        
        for cookie in accounts:
            async with aiohttp.ClientSession(cookies={".ROBLOSECURITY": cookie}) as client:
                response = await client.get("https://users.roblox.com/v1/users/authenticated", ssl=False)
                data = await response.json()

                if data.get('id') is None:
                    accounts.remove(cookie)
                    config_data['accounts'] = accounts
                    with open('config.json', 'w') as config_file:
                        json.dump(config_data, config_file, indent=4)
        await asyncio.sleep(0.1)




if __name__ == '__main__':
    loop = asyncio.get_event_loop()
  #  loop.create_task(check_config())
    executor.start_polling(dp, skip_updates=True)